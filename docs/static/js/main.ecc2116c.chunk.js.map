{"version":3,"sources":["utils.js","1-context-app/context.js","1-context-app/EditableCell.js","1-context-app/Row.js","1-context-app/Spreadsheet.js","1-context-app/App.js","2-recoil-app/atoms.js","2-recoil-app/EditableCell.js","2-recoil-app/SumCell.js","2-recoil-app/Row.js","2-recoil-app/Spreadsheet.js","2-recoil-app/App.js","index.js"],"names":["color","x","y","percent","num","parseInt","amt","Math","round","R","B","G","toString","slice","lightenColor","floor","random","SpreadsheetContext","React","createContext","EditableCell","atom","useContext","value","setValue","backgroundColor","onHover","clonedData","JSON","parse","stringify","style","width","display","padding","margin","textAlign","onMouseEnter","onTouchStart","onTouchMove","Row","size","cells","Array","keys","map","_","key","push","fontWeight","border","borderColor","reduce","sum","Spreadsheet","rows","App","data","useState","className","Provider","justifyContent","marginBottom","cellAtom","memoize","default","rowSelector","row","selector","get","i","useRecoilState","SumCell","total","useRecoilValue","rowData","ReactDOM","render","StrictMode","float","href","document","getElementById"],"mappings":"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","file":"static/js/main.ecc2116c.chunk.js","sourcesContent":["export function memoize(func) {\n  var memo = {};\n  var slice = Array.prototype.slice;\n\n  return function () {\n    var args = slice.call(arguments);\n\n    if (args in memo) return memo[args];\n    else return (memo[args] = func.apply(this, args));\n  };\n}\n\nexport function color(x, y) {\n  return lightenColor(Math.floor(Math.random() * 16777215).toString(16), 20);\n}\n\nexport function lightenColor(color, percent) {\n  var num = parseInt(color, 16),\n    amt = Math.round(2.55 * percent),\n    R = (num >> 16) + amt,\n    B = ((num >> 8) & 0x00ff) + amt,\n    G = (num & 0x0000ff) + amt;\n\n  return (\n    0x1000000 +\n    (R < 255 ? (R < 1 ? 0 : R) : 255) * 0x10000 +\n    (B < 255 ? (B < 1 ? 0 : B) : 255) * 0x100 +\n    (G < 255 ? (G < 1 ? 0 : G) : 255)\n  )\n    .toString(16)\n    .slice(1);\n}\n","import React from 'react';\n\nexport const SpreadsheetContext = React.createContext([[[]], () => {}]);\n","import React, { useContext } from 'react';\nimport { color } from '../utils';\nimport { SpreadsheetContext } from './context';\n\nexport default function EditableCell({ x, y, atom }) {\n  const [value, setValue] = useContext(SpreadsheetContext);\n  const backgroundColor = `#${color(x, y)}`;\n\n  const onHover = () => {\n    const clonedData = JSON.parse(JSON.stringify(value));\n    clonedData[x][y] = clonedData[x][y] + 1;\n    setValue(clonedData);\n  };\n\n  return (\n    <div\n      style={{\n        width: '40px',\n        display: 'inline-block',\n        backgroundColor,\n        padding: '8px',\n        margin: 0,\n        textAlign: 'center',\n      }}\n      onMouseEnter={onHover}\n      onTouchStart={onHover}\n      onTouchMove={onHover}\n    >\n      {value[x][y]}\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\nimport EditableCell from './EditableCell';\nimport { SpreadsheetContext } from './context';\nimport { color } from '../utils';\n\nfunction Row({ size, x }) {\n  const [value] = useContext(SpreadsheetContext);\n  const cells = [...Array(size).keys()].map((_, y) => {\n    return <EditableCell key={y} x={x} y={y} />;\n  });\n  cells.push(\n    <div\n      key={size + 1}\n      style={{\n        width: '40px',\n        display: 'inline-block',\n        padding: '6px',\n        margin: 0,\n        textAlign: 'center',\n        fontWeight: 'bold',\n        border: '2px solid red',\n        borderColor: `#${color(11, x)}`,\n      }}\n    >\n      {value[x].reduce((sum, value) => sum + value, 0)}\n    </div>\n  );\n  return <div style={{ border: '1px', borderColor: 'green' }}>{cells}</div>;\n}\n\nexport default Row;\n","import React from 'react';\nimport Row from './Row';\n\nfunction Spreadsheet({ size }) {\n  const rows = [...Array(size).keys()].map((_, x) => {\n    return <Row key={x} x={x} size={size} />;\n  });\n  return (\n    <div\n      style={{\n        display: 'inline-block',\n        border: '1px',\n        borderColor: 'yellow',\n        padding: '8px',\n      }}\n    >\n      {rows}\n    </div>\n  );\n}\n\nexport default Spreadsheet;\n","import React, { useState } from 'react';\nimport Spreadsheet from './Spreadsheet';\nimport { SpreadsheetContext } from './context';\n\nfunction App() {\n  const size = 6;\n  const data = [...Array(size).keys()].map((x) =>\n    [...Array(size).keys()].map((x) => 0)\n  );\n  const value = useState(data);\n\n  return (\n    <div className=\"App\">\n      <SpreadsheetContext.Provider value={value}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            marginBottom: '24px',\n          }}\n        >\n          <Spreadsheet size={size} />\n          <Spreadsheet size={size} />\n        </div>\n      </SpreadsheetContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  // RecoilRoot,\n  atom,\n  selector,\n  // useRecoilState,\n  // useRecoilValue,\n} from 'recoil';\nimport memoize from 'fast-memoize';\n\nexport const cellAtom = memoize((x, y) =>\n  atom({\n    key: `cell-${x}-${y}`, // unique ID (with respect to other atoms/selectors)\n    default: 0, // default value (aka initial value)\n  })\n);\n\nexport const rowSelector = memoize((row, size) =>\n  selector({\n    key: `row-${row}`, // unique ID (with respect to other atoms/selectors)\n    get: ({ get }) => {\n      let sum = 0;\n      for (let i = 0; i < size; i++) {\n        sum += get(cellAtom(row, i));\n      }\n      return sum;\n    },\n  })\n);\n","import React from 'react';\nimport { color } from '../utils';\nimport { useRecoilState } from 'recoil';\nimport { cellAtom } from './atoms';\n\nexport default function EditableCell({ x, y }) {\n  const [value, setValue] = useRecoilState(cellAtom(x, y));\n  const backgroundColor = `#${color(x, y)}`;\n\n  const onHover = () => setValue(value + 1);\n\n  return (\n    <div\n      style={{\n        width: '40px',\n        display: 'inline-block',\n        backgroundColor,\n        padding: '8px',\n        margin: 0,\n        textAlign: 'center',\n      }}\n      onMouseEnter={onHover}\n      onTouchStart={onHover}\n      onTouchMove={onHover}\n    >\n      {value}\n    </div>\n  );\n}\n","import React from 'react';\nimport { rowSelector } from './atoms';\nimport { useRecoilValue } from 'recoil';\nimport { color } from '../utils';\n\nexport default function SumCell({ x, size }) {\n  const total = useRecoilValue(rowSelector(x, size));\n  return (\n    <div\n      style={{\n        width: '40px',\n        display: 'inline-block',\n        padding: '6px',\n        margin: 0,\n        textAlign: 'center',\n        fontWeight: 'bold',\n        border: '2px solid red',\n        borderColor: `#${color(11, x)}`,\n      }}\n    >\n      {total}\n    </div>\n  );\n}\n","import React from 'react';\nimport EditableCell from './EditableCell';\nimport SumCell from './SumCell';\n\nfunction Row({ size, x }) {\n  const cells = [...Array(size).keys()].map((_, y) => {\n    return <EditableCell key={y} x={x} y={y} />;\n  });\n\n  cells.push(<SumCell key={size + 100} x={x} size={size} />);\n\n  return <div style={{ border: '1px', borderColor: 'green' }}>{cells}</div>;\n}\n\nexport default Row;\n","import React from 'react';\nimport Row from './Row';\n\nfunction Spreadsheet({ size }) {\n  const rows = [...Array(size).keys()].map((rowData, x) => {\n    return <Row key={x} x={x} size={size} />;\n  });\n  return (\n    <div\n      style={{\n        display: 'inline-block',\n        border: '1px',\n        borderColor: 'yellow',\n        padding: '8px',\n      }}\n    >\n      {rows}\n    </div>\n  );\n}\n\nexport default Spreadsheet;\n","import React from 'react';\nimport Spreadsheet from './Spreadsheet';\nimport { RecoilRoot } from 'recoil';\n\nfunction App() {\n  const size = 6;\n\n  return (\n    <div className=\"App\">\n      <RecoilRoot>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            marginBottom: '24px',\n          }}\n        >\n          <Spreadsheet size={size} />\n          <Spreadsheet size={size} />\n        </div>\n      </RecoilRoot>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ContextApp from './1-context-app/App';\nimport RecoilApp from './2-recoil-app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <div style={{ float: 'right' }}>\n        <a href=\"https://github.com/aaronshaf/react-context-recoil-compared\">\n          GitHub\n        </a>\n      </div>\n      <h1>React Context vs. Recoil Rerenders</h1>\n      <div>Color updates represent rerenders. Touch or hover over cells.</div>\n\n      <h2>React Context</h2>\n      <ContextApp />\n\n      <h2>Recoil</h2>\n      <RecoilApp />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}